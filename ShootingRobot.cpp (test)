class ShootingBot : public GenericRobot {
public:
    ShootingBot(const std::string& name, int x, int y, Battlefield* bf)
        : GenericRobot(name, x, y, bf) {}

    virtual void fire(int dx, int dy) override = 0;
    virtual void takeTurn() override {
        think();
        look(rand() % 3 - 1, rand() % 3 - 1);
        if (isAlive()) {
            fire(rand() % 3 - 1, rand() % 3 - 1);
        }
        move(rand() % 3 - 1, rand() % 3 - 1);
    }
};

class TrueDamageBot : public ShootingBot {
public:
    TrueDamageBot(const std::string& name, int x, int y, Battlefield* bf)
        : ShootingBot(name, x, y, bf) {
        this->type = "TrueDamageBot";
    }

    void fire(int dx, int dy) override {
        if ((dx == 0 && dy == 0) || shells <= 0) return;
        shells--;

        int targetX = getX() + dx;
        int targetY = getY() + dy;

        if (!battlefield->isValidPosition(targetX, targetY)) {
            std::cout << name << " tried to fire outside the battlefield.\n";
            return;
        }

        std::cout << name << " fires at (" << targetX << ", " << targetY << ")\n";

        for (Robot* other : battlefield->getRobots()) {
            if (other != this && other->isAlive() && other->getX() == targetX && other->getY() == targetY) {
                std::cout << name << " hits " << other->getName() << "!\n";

                if (rand() % 2 == 0) {
                    std::cout << name << " deals true damage (2 lives)!\n";
                    other->takeDamage();
                }

                other->takeDamage();

                if (!other->isAlive()) {
                    std::cout << other->getName() << " has been destroyed!\n";
                }

                break;
            }
        }

        if (shells == 0) {
            std::cout << name << " is out of shells and self-destructs!\n";
            kill();
        }
    }
};

class LifestealBot : public ShootingBot {
public:
    LifestealBot(const std::string& name, int x, int y, Battlefield* bf)
        : ShootingBot(name, x, y, bf) {
        this->type = "LifestealBot";
    }

    void fire(int dx, int dy) override {
        if ((dx == 0 && dy == 0) || shells <= 0) return;
        shells--;

        int targetX = getX() + dx;
        int targetY = getY() + dy;

        if (!battlefield->isValidPosition(targetX, targetY)) {
            std::cout << name << " tried to fire outside the battlefield.\n";
            return;
        }

        std::cout << name << " fires at (" << targetX << ", " << targetY << ")\n";

        for (Robot* other : battlefield->getRobots()) {
            if (other != this && other->isAlive() && other->getX() == targetX && other->getY() == targetY) {
                std::cout << name << " hits " << other->getName() << "!\n";

                other->takeDamage();

                if (!other->isAlive()) {
                    std::cout << other->getName() << " has been destroyed!\n";

                    if (rand() % 2 == 0) {
                        std::cout << name << " absorbs energy and gains 1 life!\n";
                        lives++;
                    }
                }

                break;
            }
        }

        if (shells == 0) {
            std::cout << name << " is out of shells and self-destructs!\n";
            kill();
        }
    }
};
public:
    LongShotBot(string t, string n, int x, int y, Battlefield* bf)
        : Robot(t, n, x, y, bf), ShootingBot(t, n, x, y, bf) {
        setRobotType("LongShotBot");
        setRobotName(n + "_LongShotBot");
    }

    void fire(int dx, int dy) {
        int distance = abs(dx) + abs(dy);
        if (distance == 0 || distance > 3 || shells <= 0) return;

        int targetX = x() + dx;
        int targetY = y() + dy;

        if (!battlefield->isInside(targetX, targetY)) {
            battlefield->getLogger()->log(robotName() + " tried to fire outside the battlefield.\n");
            return;
        }

        shells--;
        battlefield->getLogger()->log(robotName() + " fires at (" + to_string(targetX) + ", " + to_string(targetY) + ")\n");

        for (Robot* other : battlefield->getRobots()) {
            if (other != this && other->isAlive() && other->x() == targetX && other->y() == targetY) {
                battlefield->getLogger()->log(robotName() + " hits " + other->robotName() + "!\n");
                other->takeDamage();
                break;
            }
        }
    };
// ThirtyShotBot
class ThirtyShotBot : public ShootingBot {
public:
    ThirtyShotBot(string t, string n, int x, int y, Battlefield* bf)
        : Robot(t, n, x, y, bf), ShootingBot(t, n, x, y, bf) {
        setRobotType("ThirtyShotBot");
        setRobotName(n + "_ThirtyShotBot");
        shells = 30;
    }

    void fire(int dx, int dy) override {
        if (shells <= 0) return;

        int targetX = x() + dx;
        int targetY = y() + dy;

        if (!battlefield->isInside(targetX, targetY)) {
            battlefield->getLogger()->log(robotName() + " tried to fire outside the battlefield.\n");
            return;
        }

        shells--;
        battlefield->getLogger()->log(robotName() + " fires at (" + to_string(targetX) + ", " + to_string(targetY) + ") [Shells left: " + to_string(shells) + "]\n");

        for (Robot* other : battlefield->getRobots()) {
            if (other != this && other->isAlive() && other->x() == targetX && other->y() == targetY) {
                battlefield->getLogger()->log(robotName() + " hits " + other->robotName() + "!\n");
                other->takeDamage();
                break;
            }
        }
    }

    void actionMove() override {
        int dx = rand() % 3 - 1;
        int dy = rand() % 3 - 1;
        move(dx, dy);
    }

    void actions() override {
        fire(1, 0); // Example directional fire
        actionMove();
    }
};
class SemiAutoBot : public ShootingBot {
public:
    SemiAutoBot(string t, string n, int x, int y, Battlefield* bf)
        : Robot(t, n, x, y, bf), ShootingBot(t, n, x, y, bf) {
        setRobotType("SemiAutoBot");
        setRobotName(n + "_SemiAutoBot");
    }

    void fire(int dx, int dy) override {
        if (shells <= 0) return;

        int targetX = x() + dx;
        int targetY = y() + dy;

        if (!battlefield->isInside(targetX, targetY)) {
            battlefield->getLogger()->log(robotName() + " tried to fire outside the battlefield.\n");
            return;
        }

        shells--;
        battlefield->getLogger()->log(robotName() + " fires 3 rounds at (" + to_string(targetX) + ", " + to_string(targetY) + ")\n");

        for (int i = 0; i < 3; ++i) {
            for (Robot* other : battlefield->getRobots()) {
                if (other != this && other->isAlive() && other->x() == targetX && other->y() == targetY) {
                    if ((rand() % 100) < 70) {
                        battlefield->getLogger()->log(robotName() + " hits " + other->robotName() + " (round " + to_string(i+1) + ")!\n");
                        other->takeDamage();
                        if (!other->isAlive()) break;
                    } else {
                        battlefield->getLogger()->log(robotName() + " misses (round " + to_string(i+1) + ")\n");
                    }
                }
            }
        }
    }

    void actionMove() override {
        int dx = rand() % 3 - 1;
        int dy = rand() % 3 - 1;
        move(dx, dy);
    }

    void actions() override {
        fire(0, 1);  // Example fire forward
        actionMove();
    }
};
