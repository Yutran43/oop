#include <iostream>
#include <vector>
#include <string>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <sstream>
#include <algorithm>

const int MAX_ROWS = 80;
const int MAX_COLS = 50;

class Robot;

//std::string emptySpace = "+____" , robotSpace = "+" + name.substr(0, 4) ;

struct Position {
    int x, y;
};

class Battlefield {
    int rows, cols, steps;
    std::vector<std::vector<std::string>> grid;
    std::vector<Robot*> robots;

public:
    Battlefield(int r, int c) : rows(r), cols(c), grid(r, std::vector<std::string>(c, "+___")) {}
    ~Battlefield();

    int getRows() ;
    int getCols() ;
    int getSteps() ;
    std::vector<Robot*>& getRobots() ;

    void setRows(int row) ;
    void setCols(int col) ;
    void setSteps(int step) ;

    void loadFromFile(const std::string& filename);
    void runSimulation();
    void display();
    bool isValidPosition(int x, int y);
    void createRobot(Robot* robot);
};

class MovingRobot {
public:
    virtual void move(int dx, int dy) = 0;
    virtual ~MovingRobot() = default;
};

class ShootingRobot {
public:
    virtual void fire(int dx, int dy) = 0;
    virtual ~ShootingRobot() = default;
};

class SeeingRobot {
public:
    virtual void look(int dx, int dy) = 0;
    virtual ~SeeingRobot() = default;
};

class ThinkingRobot {
public:
    virtual void think() = 0;
    virtual ~ThinkingRobot() = default;
};

class Robot {
protected:
    std::string name, type;
    int posX, posY;
    int lives = 3;

public:
    Robot(std::string t, std::string n, int x, int y) :
        type(t), name(n), posX(x), posY(y) {}

    virtual void takeTurn() = 0;
    virtual bool isAlive() const { return lives > 0; }
    std::string getName() const { return name; }
    int getX() const { return posX; }
    int getY() const { return posY; }
    void setPosition(int x, int y) { posX = x; posY = y; }
    void takeDamage() { lives--; }
    void kill() { lives = 0 ; }
    virtual ~Robot() = default;
};

class GenericRobot : public Robot, public MovingRobot, public ShootingRobot, public SeeingRobot, public ThinkingRobot {
    int shells = 10;
    Battlefield* battlefield;

public:
    GenericRobot(const std::string& name, int x, int y, Battlefield* bf)
        : Robot("GenericRobot", name, x, y), battlefield(bf) {}

    void think() override {
        std::cout << name << " is thinking about its next move.\n";
    }

    void look(int dx, int dy) override {
        std::vector<std::pair<int,int>> lookAreas = {
            {posX - 1 , posY - 1}, {posX , posY - 1}, {posX + 1 , posY - 1},
            {posX - 1 , posY}    , {posX , posY}    , {posX + 1 , posY}    ,
            {posX - 1 , posY + 1}, {posX , posY + 1}, {posX + 1 , posY + 1}
        };
        std::cout << name << " is looking at (" << posX + dx << ", " << posY + dy << ")\n";

        std::vector<std::pair<int,int>> foundRobot ;

        for(Robot* other : battlefield->getRobots()) {
            for(std::pair<int,int>& lookArea : lookAreas) {
                if(other != this && other->isAlive() && other->getX() == lookArea.first && other->getY() == lookArea.second) {
                    std::cout << name << " found " << other->getName() << " at (" << other->getX() << "," << other->getY() << ")\n" ;
                    foundRobot.push_back({other->getX() , other->getY()}) ;
                }
            }
        }
    }

    void fire(int dx, int dy) override {
        if ((dx == 0 && dy == 0) || shells <= 0) return;
        shells--;

        int targetX = posX + dx;
        int targetY = posY + dy;

        if (!battlefield->isValidPosition(targetX, targetY)) {                     //only shoot inside the battlefield area
            std::cout << name << " tried to fire outside the battlefield.\n";
            return;
        }

        std::cout << name << " fires at (" << targetX << ", " << targetY << ")\n";

        for (Robot* other : battlefield->getRobots()) {                            //check if there is robot there
            if (other != this && other->isAlive() && other->getX() == targetX && other->getY() == targetY) {

                std::cout << name << " hits " << other->getName() << "!\n";
                other->takeDamage();

                if (!other->isAlive()) {
                    std::cout << other->getName() << " has been destroyed!\n";
                }
                break; // Only one robot can be at a position
            }
        }

        if (shells == 0) {
            std::cout << name << " is out of shells and self-destructs!\n";
            kill();
        }


    }

    void move(int dx, int dy) override {
        int newX = posX + dx;
        int newY = posY + dy;

        std::cout << name << " want to move to (" << newX << "," << newY << ")\n" ;
        if (!battlefield->isValidPosition(newX, newY)) {
            std::cout << "Cannot move to (" << newX << "," << newY << ") : Outside battlefield boundary\n" ;
            return ;
        }

        for (Robot* other : battlefield->getRobots()) {                            //check if there is robot there
            if (other != this && other->getX() == newX && other->getY() == newY) {
                std::cout << "Cannot move to (" << newX << "," << newY << ") : Space occupied by other robot\n" ;
                return ;
            }
        }


        posX = newX;
        posY = newY;
        std::cout << name << " moves to (" << posX << ", " << posY << ")\n";
    }

    void takeTurn() override {

        std::vector<std::string> actions = {"fire" , "look" , "move" , "think"} ;

        std::random_shuffle(actions.begin(), actions.end());

        for(std::string& action : actions) {
            if(isAlive() && action == "fire") {
                bool fireOrNot = rand() % 2;

                if(fireOrNot) {
                    int dx = rand() % 3 - 1;
                    int dy = rand() % 3 - 1;
                    fire(dx, dy);
                }
            }

            if(isAlive() && action == "look") {
                int dx = rand() % 3 - 1;
                int dy = rand() % 3 - 1;

                look(dx, dy);
            }

            if(isAlive() && action == "move") {
                bool moveOrNot = rand() % 2;

                if(moveOrNot)
                    move(rand() % 3 - 1, rand() % 3 - 1);
            }

            if(isAlive() && action == "think") {
                think() ;
            }
        }
    }
};

void Battlefield::loadFromFile(const std::string& filename) {
    std::ifstream file(filename);
    std::string line;
    while (getline(file, line)) {
        if (line.find("M by N") != std::string::npos) {
            std::istringstream iss(line);
            std::string dummy;
            int newCols, newRows;

            //M by N : 40 50
            iss >> dummy >> dummy >> dummy >> dummy >> newRows >> newCols;
            cols = newCols;
            rows = newRows;
            grid = std::vector<std::vector<std::string>>(rows, std::vector<std::string>(cols, "+___"));

        } else if (line.find("steps:") != std::string::npos) {
            std::istringstream iss(line);
            std::string dummy;
            iss >> dummy >> steps;
        } else if (line.find("GenericRobot") != std::string::npos) {
            std::istringstream iss(line);
            std::string type, name;
            std::string sx, sy;
            iss >> type >> name >> sx >> sy;

            if(name.size() < 3)
                name = name + "_" ;

            int x = sx == "random" ? (cols > 0 ? rand() % cols : 0) : std::stoi(sx);
            int y = sy == "random" ? (rows > 0 ? rand() % rows : 0) : std::stoi(sy);
            if (!isValidPosition(x, y)) {
                std::cerr << "Invalid robot position: (" << x << ", " << y << "), skipping.\n";
                continue;
            }

            Robot* robot = new GenericRobot(name, x, y, this);
            createRobot(robot) ;

            grid[y][x] = name.substr(0,3);
            std::cout << "Loaded robot " << name << " at (" << x << ", " << y << ")\n";
        }
    }
    std::cout << "Finished loading file. Battlefield size: " << cols << "x" << rows << ", Steps: " << steps << ", Robots: " << robots.size() << "\n";
    display() ;
}

void Battlefield::runSimulation() {

    for (int step = 0; step < steps && robots.size() > 1; ++step) {
        std::cout << "Step: " << step + 1 << "\n";
        for (auto& robot : robots) {
            if (robot->isAlive()) {
                robot->takeTurn();
            }
        }
        display();

        int robotCounter = 0 ;
        for(Robot* robot : robots) {
            if(robot->isAlive())
                robotCounter++ ;
        }

        if(robotCounter == 1) {
            std::cout << "Only 1 robot left\n" ;
            break;
        }
    }
}

void Battlefield::display() {
    grid = std::vector<std::vector<std::string>>(rows, std::vector<std::string>(cols, "+___"));
    //std::vector<std::vector<char>> displayGrid = grid;
    for (auto& robot : robots) {
        if (robot->isAlive())
            grid[robot->getY()][robot->getX()] = "+" + robot->getName().substr(0, 3);
    }

    std::cout << "+___" ;
    for (int x = 0; x < cols; ++x) {
        if (x < 10)
            std::cout << "+_" << x << "_" ;
        else
            std::cout << "+_" << x ;
    }
    std::cout << "\n";

    for (int y = 0; y < rows; ++y) {
        if (y < 10)
            std::cout << "+_" << y << "_" ;
        else
            std::cout << "+_" << y ;

        for (int x = 0; x < cols; ++x) {
            std::cout << grid[y][x];
        }
        std::cout << "\n";
    }
}

bool Battlefield::isValidPosition(int x, int y) {
    return x >= 0 && y >= 0 && x < cols && y < rows;
}

void Battlefield::createRobot(Robot* robot) {
    robots.push_back(robot);
}

int Battlefield::getRows() { return rows ; }
int Battlefield::getCols() { return cols ; }
int Battlefield::getSteps() { return steps ; }
std::vector<Robot*>& Battlefield::getRobots() { return robots; }

void Battlefield::setRows(int row) { rows = row ; }
void Battlefield::setCols(int col) { cols = col ; }
void Battlefield::setSteps(int step) { steps = step ; }

Battlefield::~Battlefield() {
    for (Robot* robot : robots) {
        delete robot;
    }
}

int main() {
    srand(static_cast<unsigned>(time(nullptr)));
    Battlefield battlefield(MAX_ROWS, MAX_COLS);
    battlefield.loadFromFile("input.txt");
    battlefield.runSimulation();
    return 0;
}
